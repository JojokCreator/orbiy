---
import { Icon } from "astro-icon/components";
import BlogCard from "./BlogCard.astro";
import placeholder from "../../assets/placeholder.svg";

const { title, linkAhref, linkText, posts, locale } = Astro.props;

const samplePosts = [
	{
		image: placeholder,
		title: "Title",
		snippet: "Lorem Ipsmun sdsd sd sd",
		category: "",
		slug: "/",
	},
	{
		image: placeholder,
		title: "Title",
		snippet: "Lorem Ipsmun sdsd sd sd",
		category: "",
		slug: "/",
	},
	{
		image: placeholder,
		title: "Title",
		snippet: "Lorem Ipsmun sdsd sd sd",
		category: "",
		slug: "/",
	},
];
---

<div class="mx-auto max-w-6xl px-4 py-14 2xl:px-0">
	<div class="flex items-center justify-between px-4 py-2 2xl:px-0">
		<h2 class="z-10 mb-6 text-4xl font-bold sm:text-5xl">{title}</h2>
	</div>
	<div class="glide-05 relative">
		<div class="glide-05 relative w-full">
			<!-- Slides -->
			<div class="overflow-hidden" data-glide-el="track">
				<ul
					class="whitespace-no-wrap flex-no-wrap [backface-visibility: hidden] [transform-style: preserve-3d] [touch-action: pan-Y] [will-change: transform] relative flex w-full overflow-hidden p-0"
				>
					{
						samplePosts.map((post) => (
							<BlogCard
								title={post.title}
								image={post.image}
								snippet={post.snippet}
								category={post.category}
								slug={post.slug}
							/>
						))
					}
				</ul>
				<div class="glide__arrows flex w-full justify-between" data-glide-el="controls">
					<button
						aria-label="Previous Blog Post"
						class="glide__arrow glide__arrow--left border-blue/0 sm:border-primary top-1/3 -left-4 rounded-full border bg-white/20 p-3 transition-opacity duration-300 ease-in-out hover:cursor-pointer hover:opacity-80 sm:bg-white lg:absolute lg:-left-14"
						data-glide-dir="<"
					>
						<Icon name="chevronDown" size={32} class="text-primary rotate-90" />
						<button
							aria-label="Next Blog Post"
							class="glide__arrow glide__arrow--right border-blue/0 sm:border-blue top-1/3 -right-4 rounded-full border bg-white/20 p-3 transition-opacity duration-300 ease-in-out hover:cursor-pointer hover:opacity-80 sm:bg-white lg:absolute lg:-right-14"
							data-glide-dir=">"
						>
							<Icon size={32} name="chevronDown" class="text-primary -rotate-90" />
						</button>
					</button>
				</div>
			</div>
			<!-- Indicators -->
			<div
				class="glide-bullets hidden w-full items-center justify-center gap-2 sm:flex"
				data-glide-el="controls[nav]"
			>
				{
					samplePosts.map((_: any, index: any) => (
						<button
							class="group p-4 hover:cursor-pointer hover:opacity-80"
							data-glide-dir={`=${index}`}
							aria-label="goto slide 1"
						>
							<span class="block h-3 w-3 rounded-full bg-slate-700/20 transition-colors duration-300 focus:outline-none" />
						</button>
					))
				}
			</div>
		</div>
		<div class="mt-4 flex items-center justify-end gap-3 sm:mt-0">
			<a
				href={linkAhref}
				class="text-primary group hover:border-b-primary border-b text-right text-base uppercase"
				>All Articles
				<svg
					class="stroke-primary mb-1 inline transition duration-300 ease-in-out group-hover:translate-x-2"
					xmlns="http://www.w3.org/2000/svg"
					width="20"
					height="20"
					viewBox="0 0 20 20"
					><path
						fill="currentColor"
						d="M7.646 4.147a.5.5 0 0 1 .707-.001l5.484 5.465a.55.55 0 0 1 0 .779l-5.484 5.465a.5.5 0 0 1-.706-.708L12.812 10L7.647 4.854a.5.5 0 0 1-.001-.707"
					></path></svg
				></a
			>
		</div>
	</div>

	<script>
		import Glide, { type ComponentFunction } from "@glidejs/glide";
		const NAV_SELECTOR = '[data-glide-el="controls[nav]"]';

		const SetActiveBulletInstantly: ComponentFunction = (Glide, Components, Events) => {
			let controlNavs: HTMLElement[] = [];

			return {
				mount() {
					controlNavs = Array.from(Components.Html.root.querySelectorAll(NAV_SELECTOR));

					Events.on("run", () => {
						const settings = Glide.settings;
						const activeClass = settings.classes.nav.active;

						controlNavs.forEach((controlNav) => {
							const activeItem = controlNav.children.item(Glide.index) as HTMLElement;

							controlNav.querySelectorAll(`.${activeClass}`).forEach((el) => {
								el.classList.remove(activeClass);
							});

							activeItem.classList.add(activeClass);
						});
					});
				},
			};
		};
		const glide05 = new Glide(".glide-05", {
			type: "carousel",
			focusAt: "center",
			breakpoints: {
				640: {
					perView: 1,
				},
				768: {
					perView: 2,
				},
			},
			startAt: 0,
			perView: 3,
			autoplay: false,
			animationDuration: 1000,
			gap: 0,
		});

		glide05.mount({ SetActiveBulletInstantly });
	</script>
</div>

<style>
	.glide__bullet--active > span {
		background-color: red;
	}
</style>
