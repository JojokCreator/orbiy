---
import { useStoryblokApi } from "@storyblok/astro";
import Button from "./reusable/Button.astro";
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";

interface Props {
	invertMenu?: boolean;
}

const { invertMenu = false } = Astro.props;

let siteConfig;

const sbApi = useStoryblokApi();
try {
	const { data: siteConfigData } = await sbApi.get(
		"cdn/stories/site-config",
		{
			version:
				import.meta.env.STORYBLOK_LOCAL &&
				import.meta.env.STORYBLOK_PREVIEW
					? "draft"
					: "published",
		},
	);
	siteConfig = siteConfigData.story?.content;
} catch (error) {
	console.error("Error fetching site-config:", error);
}

const { logo, footer_logo, nav_links, cta_button } = siteConfig;

const selectedLogo = invertMenu && footer_logo ? footer_logo : logo;

const navbarBaseClasses = invertMenu
	? "fixed top-0 left-0 z-50 mx-auto w-screen px-4 transition-all duration-300 lg:static lg:w-auto lg:max-w-[1440px] lg:py-2 lg:bg-transparent xl:px-0"
	: "fixed top-0 left-0 z-50 mx-auto w-screen px-4 transition-all duration-300 lg:static lg:w-auto lg:max-w-[1440px] lg:py-2 lg:bg-transparent xl:px-0";

const hamburgerColors = invertMenu
	? "text-gray-900 hover:text-gray-600"
	: "text-white hover:text-gray-400";

const closeColors = invertMenu
	? "text-gray-900 hover:text-gray-600"
	: "text-white hover:text-gray-400";

// Mobile menu background colors based on invertMenu
const mobileMenuBg = invertMenu ? "bg-white" : "bg-black/80";

// Mobile menu link colors (different from desktop nav)
const mobileLinkClasses = invertMenu
	? "text-2xl text-gray-900 hover:text-gray-600 aria-current:!underline aria-current:!underline-offset-8 lg:text-lg"
	: "text-2xl text-white hover:text-gray-400 aria-current:!underline aria-current:!underline-offset-8 lg:text-lg";
---

<header class="z-[999] w-screen lg:absolute px-4 2xl:px-0">
	<div
		id="navbar"
		class={navbarBaseClasses}
		data-inverted={invertMenu ? "true" : "false"}
	>
		<div class="flex h-16 items-center justify-between">
			<div class="lg:flex lg:items-center lg:gap-12">
				<a
					class="flex w-52 items-center gap-2 text-lg lg:-translate-x-4 hover:opacity-80 transition-opacity duration-200"
					href="/"
				>
					<Image
						src={selectedLogo.filename}
						alt={selectedLogo.alt || "Logo"}
						inferSize
						class="h-auto w-28 lg:w-36 flex-shrink-0 object-contain"
					/>
				</a>
			</div>
			<div
				class="flex h-13 w-13 items-center justify-center space-x-2 focus:outline-none lg:h-auto lg:w-auto"
			>
				<div
					id="mobile-menu"
					class={`top-0 hidden h-[100vh] w-screen translate-y-[5vh] transform overflow-visible backdrop-blur-md opacity-0 transition-all transition-discrete duration-500 lg:mt-0 lg:block lg:h-auto lg:w-auto lg:translate-y-0 lg:opacity-100 lg:duration-0 lg:bg-transparent lg:backdrop-blur-none open:block open:translate-y-0 open:opacity-100 open:starting:-translate-y-[5vh] open:starting:opacity-0 ${mobileMenuBg}`}
				>
					{/* Close Button for Mobile Menu */}
					<button
						aria-label="Close Mobile Menu"
						id="mobile-menu-close"
						class="absolute top-4 right-4 z-10 flex h-10 w-10 items-center justify-center rounded-full transition-colors duration-200 ease-in-out lg:hidden"
						popovertarget="mobile-menu"
					>
						<Icon class={`h-8 w-8 ${closeColors}`} name="close" />
					</button>

					<nav
						class="relative grid h-[calc(100vh-180px)] place-items-center lg:block lg:h-auto"
					>
						<ul
							class="flex flex-col items-center justify-center gap-6 text-sm lg:flex-row"
						>
							{
								nav_links.map(
									(item: {
										label: string;
										link: { cached_url: string };
									}) => (
										<li>
											<a
												aria-current={Astro.url.pathname.includes(
													item.link.cached_url,
												)}
												class={mobileLinkClasses}
												href={
													"/" + item.link.cached_url
												}
											>
												{item.label}
											</a>
										</li>
									),
								)
							}
						</ul>
					</nav>
				</div>
				<button
					aria-label="Open Mobile Menu"
					id="mobile-menu-button"
					popovertarget="mobile-menu"
					class="relative flex h-12 w-12 cursor-pointer items-center justify-end rounded-full transition-colors duration-200 ease-in-out lg:hidden"
				>
					<Icon
						class={`h-8 w-8 ${hamburgerColors}`}
						name="hamburger"
					/>
				</button>
			</div>
			{
				cta_button && (
					<Button
						class="hidden w-52 items-center text-center lg:flex"
						link={"/" + cta_button[0].link.cached_url}
						type={cta_button[0].style || "gray"}
						buttonText={cta_button[0].text}
					/>
				)
			}
		</div>
	</div>
</header>

<script>
	function initializeMobileMenu() {
		const mobileMenuButton = document.getElementById(
			"mobile-menu-button",
		) as HTMLButtonElement;
		const mobileMenu = document.getElementById(
			"mobile-menu",
		) as HTMLElement;
		const navbar = document.getElementById("navbar") as HTMLElement;

		if (mobileMenuButton && mobileMenu && navbar) {
			function handleMobileMenuState() {
				if (window.innerWidth < 768) {
					mobileMenu.setAttribute("popover", "auto");

					if (!mobileMenuButton.hasAttribute("group-aria-pressed")) {
						mobileMenuButton.setAttribute(
							"group-aria-pressed",
							"false",
						);
					}

					if (
						!mobileMenu.hasAttribute("data-toggle-listener-added")
					) {
						mobileMenu.addEventListener(
							"toggle",
							handlePopoverToggle,
						);
						mobileMenu.setAttribute(
							"data-toggle-listener-added",
							"true",
						);
					}
				} else {
					mobileMenu.removeAttribute("popover");
					mobileMenu.removeAttribute("data-toggle-listener-added");
					mobileMenuButton.removeAttribute("group-aria-pressed");

					if (mobileMenu.matches(":popover-open")) {
						mobileMenu.hidePopover();
					}

					if (mobileMenu.hasAttribute("data-toggle-listener-added")) {
						mobileMenu.removeEventListener(
							"toggle",
							handlePopoverToggle,
						);
					}
					document.body.classList.remove("overflow-y-hidden");
				}
			}

			function handleLinkClick() {
				if (window.innerWidth < 768) {
					mobileMenu.hidePopover();
				}
			}

			const menuLinks = mobileMenu.querySelectorAll("a");
			menuLinks.forEach((link) => {
				link.addEventListener("click", handleLinkClick);
			});

			function handlePopoverToggle(event: Event) {
				const target = event.target as HTMLElement;

				if (target.matches(":popover-open")) {
					mobileMenuButton.ariaPressed = "true";
					document.body.classList.add("overflow-y-hidden");
				} else {
					mobileMenuButton.ariaPressed = "false";
					document.body.classList.remove("overflow-y-hidden");
				}
			}

			// Add scroll-based navbar background for screens smaller than lg
			function handleNavbarScroll() {
				const isInverted =
					navbar.getAttribute("data-inverted") === "true";

				if (window.innerWidth < 1024) {
					// lg breakpoint
					if (window.scrollY > 50) {
						if (isInverted) {
							navbar.classList.add(
								"bg-white/90",
								"backdrop-blur-md",
							);
							navbar.classList.remove("bg-transparent");
						} else {
							navbar.classList.add(
								"bg-black/90",
								"backdrop-blur-md",
							);
							navbar.classList.remove("bg-transparent");
						}
					} else {
						navbar.classList.remove(
							"bg-white/90",
							"bg-black/90",
							"backdrop-blur-md",
						);
						navbar.classList.add("bg-transparent");
					}
				} else {
					// Reset to transparent on larger screens
					navbar.classList.remove(
						"bg-white/90",
						"bg-black/90",
						"backdrop-blur-md",
					);
					navbar.classList.add("bg-transparent");
				}
			}

			window.addEventListener("resize", () => {
				handleMobileMenuState();
				handleNavbarScroll();
			});

			window.addEventListener("scroll", handleNavbarScroll);

			handleMobileMenuState();
			handleNavbarScroll();
		}
	}
	initializeMobileMenu();
</script>
