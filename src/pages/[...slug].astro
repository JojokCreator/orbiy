---
import { useStoryblokApi } from "@storyblok/astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import Layout from "../layouts/Layout.astro";
import type { Page } from "../../.storyblok/types/288025125330867/storyblok-components.d.ts";

interface StoryblokStory {
	name: string;
	slug: string;
	content: Page & Record<string, unknown>;
	created_at: string;
	published_at: string;
	id: number;
	uuid: string;
	full_slug: string;
	[k: string]: unknown;
}

export async function getStaticPaths() {
	const sbApi = useStoryblokApi();

	const { data } = await sbApi.get("cdn/stories", {
		content_type: "page",
		version: import.meta.env.DEV ? "draft" : "published",
	});

	const stories: StoryblokStory[] = Object.values(data.stories);
	return stories.map((story) => {
		return {
			params: { slug: story.slug === "home" ? "" : story.slug },
			props: { story: story },
		};
	});
}

const { slug } = Astro.params;

// Handle root path and home slug - serve home content
const storySlug = !slug || slug === "" || slug === "home" ? "home" : slug;

// Use story from props if available (build time), otherwise fetch (dev time)
let story: StoryblokStory = Astro.props.story;
if (!story) {
	const sbApi = useStoryblokApi();
	const { data } = await sbApi.get(`cdn/stories/${storySlug}`, {
		version: import.meta.env.DEV ? "draft" : "published",
	});
	story = data.story;
}

let siteConfig;

const sbApi = useStoryblokApi();
try {
	const { data: siteConfigData } = await sbApi.get(
		"cdn/stories/site-config",
		{
			version: import.meta.env.DEV ? "draft" : "published",
		},
	);
	siteConfig = siteConfigData.story?.content;
} catch (error) {
	console.error("Error fetching site-config:", error);
}
// Set SEO metadata from page content or fallback to site config
const isHome = !slug || slug === "" || slug === "home";
const pageTitle = isHome
	? `Home | ${siteConfig.site_name}`
	: story.content?.title || story.name;
const fullPageTitle = isHome
	? `Home | ${siteConfig.site_name}`
	: `${pageTitle} | ${siteConfig.site_name}`;
const pageDescription =
	story.content?.description || siteConfig.site_description;
const pageOgImage = story.content?.og_image?.filename || siteConfig.og_image;
const invertMenu = story.content?.invert_menu || false;
---

<Layout
	title={fullPageTitle}
	description={pageDescription}
	ogImage={pageOgImage}
	invertMenu={invertMenu}
>
	<StoryblokComponent blok={story.content as any} />
</Layout>
