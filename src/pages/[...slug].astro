---
import { useStoryblokApi } from "@storyblok/astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import Layout from "../layouts/Layout.astro";
import type { Page } from "../../.storyblok/types/288025125330867/storyblok-components.d.ts";
import { loadEnv } from "vite";

const env = loadEnv(process.env.NODE_ENV || "", process.cwd(), "STORYBLOK");
const isLocal = env.STORYBLOK_LOCAL === "yes";
const isPreview = isLocal ? true : env.STORYBLOK_PREVIEW === "yes";

interface StoryblokStory {
	name: string;
	slug: string;
	content: Page & Record<string, unknown>;
	created_at: string;
	published_at: string;
	id: number;
	uuid: string;
	full_slug: string;
	[k: string]: unknown;
}

export async function getStaticPaths() {
	// Skip getStaticPaths for SSR mode (local + preview)
	if (isPreview) {
		// Return empty array for SSR - paths will be handled dynamically
		return [];
	}

	const sbApi = useStoryblokApi();

	try {
		const { data } = await sbApi.get("cdn/stories", {
			content_type: "page",
			version: "published",
		});

		const stories: StoryblokStory[] = Object.values(data.stories);
		return stories.map((story) => {
			return {
				params: { slug: story.slug === "home" ? "" : story.slug },
				props: { story: story },
			};
		});
	} catch (error) {
		console.error("❌ Storyblok API Error in getStaticPaths:", error);
		throw new Error(
			`Failed to fetch stories from Storyblok: ${error instanceof Error ? error.message : "Unknown error"}`,
		);
	}
}

const { slug } = Astro.params;

// Handle root path and home slug - serve home content
const storySlug = !slug || slug === "" || slug === "home" ? "home" : slug;

// Use story from props if available (build time), otherwise fetch (dev time)
let story: StoryblokStory = Astro.props.story;
if (!story) {
	const sbApi = useStoryblokApi();
	try {
		const { data } = await sbApi.get(`cdn/stories/${storySlug}`, {
			version: isPreview ? "draft" : "published",
		});
		story = data.story;
	} catch (error) {
		console.error(
			`❌ Storyblok API Error fetching story "${storySlug}":`,
			error,
		);
		throw new Error(
			`Failed to fetch story "${storySlug}" from Storyblok: ${error instanceof Error ? error.message : "Unknown error"}`,
		);
	}
}

let siteConfig;

const sbApi = useStoryblokApi();
try {
	const { data: siteConfigData } = await sbApi.get(
		"cdn/stories/site-config",
		{
			version: isPreview ? "draft" : "published",
		},
	);
	siteConfig = siteConfigData.story?.content;
} catch (error) {
	console.error("❌ Storyblok API Error fetching site-config:", error);
	// Don't throw for site-config - provide defaults and continue
	siteConfig = {
		site_name: "ORBiY",
		site_description: "Discover your next vehicle with ORBiY",
		og_image: "/images/og-default.jpg",
	};
}
// Validate story data
if (!story || !story.content) {
	throw new Error(`Story "${storySlug}" not found or has no content`);
}

// Set SEO metadata from page content or fallback to site config
const isHome = !slug || slug === "" || slug === "home";
const pageTitle = isHome
	? `Home | ${siteConfig.site_name}`
	: story.content?.title || story.name;
const fullPageTitle = isHome
	? `Home | ${siteConfig.site_name}`
	: `${pageTitle} | ${siteConfig.site_name}`;
const pageDescription =
	story.content?.description || siteConfig.site_description;
const pageOgImage = story.content?.og_image?.filename || siteConfig.og_image;
const invertMenu = story.content?.invert_menu || false;
---

<Layout
	title={fullPageTitle}
	description={pageDescription}
	ogImage={pageOgImage}
	invertMenu={invertMenu}
>
	<StoryblokComponent blok={story.content as any} />
</Layout>
