---
import { storyblokEditable } from "@storyblok/astro";
import { getImage } from "astro:assets";
import Button from "../components/reusable/Button.astro";

const { blok } = Astro.props;
const { title, description, heading_type, background_color, button, image } =
  blok;

let backgroundImageUrl = "";
if (image?.filename) {
  const { src } = await getImage({
    src: image.filename,
    format: "webp",
    quality: 80,
    width: 1920,
    height: 1080,
  });
  backgroundImageUrl = src;
}

const getBackgroundColorClass = (color: string) => {
  switch (color) {
    case "green":
      return "bg-green";
    case "red":
      return "bg-red";
    default:
      return "bg-black";
  }
};

const backgroundColorClass = getBackgroundColorClass(
  background_color || "black",
);

const HeadingTag = heading_type || "h2";
---

<section
  class={`relative ${backgroundImageUrl ? "min-h-[100vh]" : "min-h-[50vh]"} w-screen overflow-hidden ${backgroundColorClass}`}
  style={backgroundImageUrl &&
    `background-image: url('${backgroundImageUrl}'); background-size: cover; background-position: center; background-repeat: no-repeat;`}
  {...storyblokEditable(blok)}
>
  {backgroundImageUrl && <div class="absolute inset-0 bg-black/60" />}
  <div
    class="relative z-10 flex h-[100vh] md:pb-20 w-full flex-col items-center justify-center px-4 text-center max-w-4xl mx-auto"
  >
    <Fragment
      set:html={`<${HeadingTag} class="mb-6 text-white text-pretty">${title}</${HeadingTag}>`}
    />
    <p class="mb-8 text-light-gray">
      {description}
    </p>
    {
      button && button.length > 0 && (
        <Button
          type={button[0].style}
          buttonText={button[0].text}
          link={"/" + button[0].link?.cached_url}
        />
      )
    }
  </div>
</section>
