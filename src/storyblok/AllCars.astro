---
import { storyblokEditable } from "@storyblok/astro";
import { getCollection } from "astro:content";
import Button from "../components/reusable/Button.astro";

const { blok } = Astro.props;
const { title, description, featured_cars_button } = blok;

// Get all cars from the content collection
const allCars = await getCollection("cars");

// Use allCars for potential future features or logging
console.log(`Loaded ${allCars.length} cars`);
---

<section {...storyblokEditable(blok)} class="">
    <div class="site-container vertical-p">
        <div>
            {/* Title - Always h1 and centered */}
            <h1 class="text-gray text-center">
                {title}
            </h1>

            {/* Description - Always centered */}
            {
                description && (
                    <p class="text-gray mt-4 text-center">{description}</p>
                )
            }

            <div class="h-350 py-4 sm:py-8">
                <iframe
                    id="myIframe"
                    src="https://orbiy.myloopit.com"
                    width="100%"
                    height="100%"
                    allow="clipboard-read; clipboard-write"></iframe>
            </div>

            <!-- Footer CTA Button -->
            {
                featured_cars_button && featured_cars_button.length > 0 && (
                    <div class="mt-6 md:mt-12">
                        {
                            <Button
                                type={featured_cars_button[0].style}
                                buttonText={featured_cars_button[0].text}
                                link={"/"+featured_cars_button[0].link.cached_url}
                            />
                        }
                    </div>
                )
            }
        </div>
    </div>
</section>

<script>
    // Update this variable with your website URL
    const allowedOrigin = "https://orbiy.netlify.app";
    // Define the ID of the iframe that you want to resize dynamically
    const iframeId = "myIframe";
    // Use to get iframe height
    var iframeHeight = 0;
    // Use to send current position of iframe
    let debounceTimeout: number | null = null;

    window.addEventListener("message", (event) => {
        if (event.origin === allowedOrigin) {
            if (event.data.type === "PAGE_HEIGHT_CHANGE") {
                let newHeight = event.data.height;

                const iframe = document.getElementById(iframeId);

                if (iframe) {
                    iframeHeight = newHeight;
                    iframe.style.height = `${iframeHeight}px`;
                } else {
                    console.warn(
                        `Iframe with ID '${iframeId}' not found. Please ensure the correct ID is set.`,
                    );
                }
            }
        } else {
            console.warn(
                "Received message from unexpected origin:",
                event.origin,
            );
        }
    });

    window.addEventListener("scroll", () => {
        const iframe = document.getElementById(iframeId);

        if (iframe) {
            const rect = iframe.getBoundingClientRect();
            const visibleTop = window.scrollY + rect.top;
            const currentPosition = window.scrollY - visibleTop;
            const maximumAllowedHeight = iframeHeight * 0.8; // 80%

            if (debounceTimeout !== null) {
                clearTimeout(debounceTimeout);
            }

            // Send the current scroll position to the iframe when scrolling stops
            debounceTimeout = window.setTimeout(() => {
                // Send the current scroll position to the iframe only while scrolling within it, not before or after
                if (rect.top <= 0 && currentPosition <= maximumAllowedHeight) {
                    const iframeElement = iframe as HTMLIFrameElement;
                    if (iframeElement.contentWindow) {
                        iframeElement.contentWindow.postMessage(
                            { type: "scrollPosition", currentPosition },
                            "*",
                        );
                    }
                }
            }, 200);
        }
    });
</script>
